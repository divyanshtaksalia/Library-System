
const booksContainer = document.getElementById('booksList');
const addBookForm = document.getElementById('addBookForm');
const returnRequestsList = document.getElementById('returnRequestsList');
// ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® 1: ‡§∏‡§≠‡•Ä ‡§ï‡§ø‡§§‡§æ‡§¨‡•á‡§Ç API ‡§∏‡•á ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å
// public/books.js
// ‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§ ‡§Æ‡•á‡§Ç, ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞ ‡§ï‡•ã ‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç
const usersList = document.getElementById('usersList'); 

// üí° Admin ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡§≠‡•Ä ‡§Ø‡•Ç‡§ú‡§º‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§®
async function loadUsers() {
    if (!usersList) return; // ‡§Ö‡§ó‡§∞ ‡§ï‡§Ç‡§ü‡•á‡§®‡§∞ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à, ‡§§‡•ã Admin ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à
    
    try {
        const response = await fetch('/api/users');
        const data = await response.json();
        
        if (data.success) {
            renderUsers(data.users);
        } else {
            usersList.innerHTML = `<p class="error">‡§Ø‡•Ç‡§ú‡§º‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: ${data.message}</p>`;
        }
    } catch (error) {
        usersList.innerHTML = '<p class="error">‡§Ø‡•Ç‡§ú‡§º‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§</p>';
    }
}

// üí° ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§°‡•á‡§ü‡§æ ‡§ï‡•ã HTML ‡§Æ‡•á‡§Ç ‡§∞‡•á‡§Ç‡§°‡§∞ ‡§ï‡§∞‡•á‡§Ç
function renderUsers(users) {
    if (users.length === 0) {
        usersList.innerHTML = '<p>‡§ï‡•ã‡§à ‡§∏‡•ç‡§ü‡•Ç‡§°‡•á‡§Ç‡§ü ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ‡•§</p>';
        return;
    }

    // ‡§π‡§Æ ‡§Ø‡§π‡§æ‡§Å ‡§ü‡•á‡§¨‡§≤ ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞ ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç
    const tableHtml = `
        <table>
            <thead>
                <tr>
                    <th>ID</th>
                    <th>‡§Ø‡•Ç‡§ú‡§º‡§∞‡§®‡•á‡§Æ</th>
                    <th>‡§à‡§Æ‡•á‡§≤</th>
                    <th>‡§∏‡•ç‡§ü‡•á‡§ü‡§∏</th>
                    <th>‡§è‡§ï‡•ç‡§∂‡§®</th>
                </tr>
            </thead>
            <tbody>
                ${users.map(user => `
                    <tr>
                        <td>${user.user_id}</td>
                        <td>${user.username}</td>
                        <td>${user.email}</td>
                        <td style="color: ${user.account_status === 'blocked' ? 'red' : 'green'}; font-weight: bold;">
                            ${user.account_status.toUpperCase()}
                        </td>
                        <td>
                            ${user.account_status === 'active' ? 
                                `<button 
                                    data-user-id="${user.user_id}" 
                                    data-status="blocked" 
                                    class="btn-status btn-block"
                                    style="background-color: #dc3545; color: white;">Block</button>` 
                                : 
                                `<button 
                                    data-user-id="${user.user_id}" 
                                    data-status="active" 
                                    class="btn-status btn-activate"
                                    style="background-color: #28a745; color: white;">Activate</button>`
                            }
                        </td>
                    </tr>
                `).join('')}
            </tbody>
        </table>
    `;
    usersList.innerHTML = tableHtml;
}
// public/books.js

// üí° ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§¨‡§ü‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§µ‡•á‡§Ç‡§ü ‡§≤‡§ø‡§∏‡§®‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
function setupUserStatusListeners() {
    if (!usersList) return;

    usersList.addEventListener('click', async (e) => {
        if (e.target.classList.contains('btn-status')) {
            const userId = e.target.dataset.userId;
            const newStatus = e.target.dataset.status; // 'active' ‡§Ø‡§æ 'blocked'
            const actionText = newStatus === 'blocked' ? '‡§¨‡•ç‡§≤‡•â‡§ï' : '‡§è‡§ï‡•ç‡§ü‡§ø‡§µ‡•á‡§ü';

            if (!confirm(`‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§á‡§∏ ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ${actionText} ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?`)) {
                return;
            }

            try {
                const response = await fetch('/api/users/status', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId: userId, status: newStatus })
                });
                
                const data = await response.json();
                alert(data.message);
                
                if (data.success) {
                    loadUsers(); // ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                }
            } catch (error) {
                alert(`‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§∏‡•ç‡§ü‡•á‡§ü‡§∏ ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§`);
            }
        }
    });
}
async function loadBooks(showAdminTools = false) {
    try {
        const response = await fetch('/api/books');
        const data = await response.json();

        if (data.success) {
            renderBooks(data.books, showAdminTools);
        } else {
            booksContainer.innerHTML = `<p class="error">${data.message}</p>`;
        }
    } catch (error) {
        booksContainer.innerHTML = '<p class="error">‡§∏‡§∞‡•ç‡§µ‡§∞ ‡§∏‡•á ‡§ï‡§ø‡§§‡§æ‡§¨‡•á‡§Ç ‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã ‡§∏‡§ï‡•Ä‡§Ç‡•§</p>';
    }
}

// ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® 2: HTML ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§æ‡§¨‡•ã‡§Ç ‡§ï‡•ã ‡§∞‡•á‡§Ç‡§°‡§∞ ‡§ï‡§∞‡•á‡§Ç
function renderBooks(books, showAdminTools) {
    booksContainer.innerHTML = ''; // ‡§™‡§ø‡§õ‡§≤‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç
    
    if (books.length === 0) {
        booksContainer.innerHTML = '<p>‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§ï‡•ã‡§à ‡§ï‡§ø‡§§‡§æ‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§</p>';
        return;
    }

    const listHtml = books.map(book => `
        <div class="book-card ${book.status}">
            <h4>${book.title}</h4>
            <p><strong>‡§≤‡•á‡§ñ‡§ï:</strong> ${book.author}</p>
            <p><strong>‡§∂‡•ç‡§∞‡•á‡§£‡•Ä:</strong> ${book.category}</p>
            <p><strong>‡§∏‡•ç‡§ü‡•á‡§ü‡§∏:</strong> <span class="status-label">${book.status === 'available' ? '‡§â‡§™‡§≤‡§¨‡•ç‡§ß' : '‡§á‡§∂‡•ç‡§Ø‡•Ç ‡§π‡•à'}</span></p>
            ${showAdminTools ? 
                `<button data-id="${book.book_id}" class="btn-delete">‡§π‡§ü‡§æ‡§è‡§Å</button>` : 
                `<button data-id="${book.book_id}" class="btn-order" ${book.status !== 'available' ? 'disabled' : ''}>‡§ë‡§∞‡•ç‡§°‡§∞ ‡§ï‡§∞‡•á‡§Ç</button>`
            }
        </div>
    `).join('');

    // ‡§¨‡•á‡§∏‡§ø‡§ï CSS ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∏‡•ç‡§ü‡§æ‡§á‡§≤ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç
    const style = `
        <style>
            .book-card { border: 1px solid #ccc; padding: 15px; margin-bottom: 10px; border-radius: 4px; display: flex; flex-direction: column; }
            .book-card.issued { background-color: #fcebeb; }
            .status-label { font-weight: bold; color: ${showAdminTools ? '#333' : 'green'}; }
            .book-card.issued .status-label { color: red; }
            .btn-delete, .btn-order { padding: 8px; margin-top: 10px; cursor: pointer; border: none; border-radius: 3px; }
            .btn-delete { background-color: #dc3545; color: white; }
            .btn-order { background-color: #28a745; color: white; }
            .btn-order:disabled { background-color: #6c757d; cursor: not-allowed; }
        </style>
    `;

    booksContainer.innerHTML = style + listHtml;
}
// books.js ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ renderBooks ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ï‡•á ‡§¨‡§æ‡§¶
// -------------------------------------------------------------------

// ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® 3: Delete ‡§á‡§µ‡•á‡§Ç‡§ü ‡§≤‡§ø‡§∏‡§®‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
function setupDeleteListeners() {
    // ‡§Ø‡§π ‡§á‡§µ‡•á‡§Ç‡§ü ‡§≤‡§ø‡§∏‡§®‡§∞ ‡§ï‡•á‡§µ‡§≤ Admin ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ö‡§≤‡•á‡§ó‡§æ
    booksContainer.addEventListener('click', async (e) => {
        if (e.target.classList.contains('btn-delete')) {
            const bookId = e.target.dataset.id;
            
            if (!confirm(`‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§¨‡•Å‡§ï ID: ${bookId} ‡§ï‡•ã ‡§π‡§ü‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?`)) {
                return; // ‡§Ö‡§ó‡§∞ Admin ‡§ï‡•à‡§Ç‡§∏‡§ø‡§≤ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à
            }

            try {
                const response = await fetch(`/api/books/${bookId}`, {
                    method: 'DELETE'
                });
                
                const data = await response.json();
                alert(data.message);
                
                if (data.success) {
                    loadBooks(true); // ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§∞‡•Ä‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
                }
            } catch (error) {
                alert('‡§ï‡§ø‡§§‡§æ‡§¨ ‡§π‡§ü‡§æ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§');
            }
        }
    });
}
// ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® 4: ‡§á‡§∂‡•ç‡§Ø‡•Ç ‡§á‡§µ‡•á‡§Ç‡§ü ‡§≤‡§ø‡§∏‡§®‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç (Student ‡§ï‡•á ‡§≤‡§ø‡§è)
function setupIssueListeners() {
    booksContainer.addEventListener('click', async (e) => {
        if (e.target.classList.contains('btn-order')) {
            const bookId = e.target.dataset.id;
            const userId = localStorage.getItem('userId');

            if (!userId) {
                alert('‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡§π‡§≤‡•á ‡§≤‡•â‡§ó‡§ø‡§® ‡§ï‡§∞‡•á‡§Ç!');
                return;
            }

            if (!confirm(`‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§á‡§∏ ‡§ï‡§ø‡§§‡§æ‡§¨ ‡§ï‡•ã ‡§á‡§∂‡•ç‡§Ø‡•Ç ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?`)) {
                return;
            }

            try {
                const response = await fetch('/api/issue-book', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ userId: userId, bookId: bookId })
                });
                
                const data = await response.json();
                alert(data.message); 
                
                if (data.success) {
                    loadBooks(false); // Student ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§∞‡•Ä‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
                    if (typeof loadMyOrders === 'function') {
                        loadMyOrders(); // ‡§ë‡§∞‡•ç‡§°‡§∞‡•ç‡§∏ ‡§ï‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§≠‡•Ä ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                    }
                }
            } catch (error) {
                alert('‡§ï‡§ø‡§§‡§æ‡§¨ ‡§á‡§∂‡•ç‡§Ø‡•Ç ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§');
            }
        }
    });
}
// public/books.js

// ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® 5: ‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§∞‡§ø‡§ü‡§∞‡•ç‡§® ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Å
async function loadReturnRequests() {
    if (!returnRequestsList) return; 

    try {
        const response = await fetch('/api/return-requests');
        const data = await response.json();

        if (data.success) {
            renderReturnRequests(data.requests);
        } else {
            returnRequestsList.innerHTML = `<p class="error">${data.message}</p>`;
        }
    } catch (error) {
        returnRequestsList.innerHTML = '<p class="error">‡§∞‡§ø‡§ü‡§∞‡•ç‡§® ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§</p>';
    }
}
// public/books.js

// ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® 6: HTML ‡§Æ‡•á‡§Ç ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§∞‡•á‡§Ç‡§°‡§∞ ‡§ï‡§∞‡•á‡§Ç
function renderReturnRequests(requests) {
    if (requests.length === 0) {
        returnRequestsList.innerHTML = '<p>‡§ï‡•ã‡§à ‡§≤‡§Ç‡§¨‡§ø‡§§ ‡§∞‡§ø‡§ü‡§∞‡•ç‡§® ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§</p>';
        return;
    }

    const listHtml = requests.map(request => `
        <div class="request-card" style="border: 1px solid #ccc; padding: 15px; margin-bottom: 10px; border-radius: 4px;">
            <h4>${request.title} (ID: ${request.book_id})</h4>
            <p><strong>‡§Ø‡•Ç‡§ú‡§º‡§∞:</strong> ${request.username}</p>
            <p><strong>‡§≤‡•á‡§ñ‡§ï:</strong> ${request.author}</p>
            <p><strong>‡§á‡§∂‡•ç‡§Ø‡•Ç ‡§§‡§ø‡§•‡§ø:</strong> ${new Date(request.issue_date).toLocaleDateString()}</p>
            
            <button 
                data-issue-id="${request.issue_id}" 
                data-book-id="${request.book_id}" 
                data-action="accept" 
                class="btn-handle btn-accept" 
                style="background-color: #28a745; color: white; padding: 8px; border: none; cursor: pointer; margin-right: 10px;">
                ‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç (Accept)
            </button>
            
            <button 
                data-issue-id="${request.issue_id}" 
                data-book-id="${request.book_id}" 
                data-action="reject" 
                class="btn-handle btn-reject"
                style="background-color: #dc3545; color: white; padding: 8px; border: none; cursor: pointer;">
                ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞ ‡§ï‡§∞‡•á‡§Ç (Reject)
            </button>
        </div>
    `).join('');

    returnRequestsList.innerHTML = listHtml;
}
// public/books.js

// ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® 7: ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§á‡§µ‡•á‡§Ç‡§ü ‡§≤‡§ø‡§∏‡§®‡§∞ ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
function setupReturnRequestListeners() {
    if (!returnRequestsList) return;

    returnRequestsList.addEventListener('click', async (e) => {
        if (e.target.classList.contains('btn-handle')) {
            const issueId = e.target.dataset.issueId;
            const bookId = e.target.dataset.bookId;
            const action = e.target.dataset.action; // 'accept' ‡§Ø‡§æ 'reject'

            const actionText = action === 'accept' ? '‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞' : '‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡§æ‡§∞';

            if (!confirm(`‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§µ‡§æ‡§ï‡§à ‡§á‡§∏ ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§ï‡•ã ${actionText} ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?`)) {
                return;
            }

            try {
                const response = await fetch('/api/handle-return', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ issueId, bookId, action })
                });
                
                const data = await response.json();
                alert(data.message);
                
                if (data.success) {
                    // 1. ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                    loadReturnRequests(); 

                    // 2. ‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§ï‡•ã ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç (‡§ï‡•á‡§µ‡§≤ accept ‡§π‡•ã‡§®‡•á ‡§™‡§∞)
                    if (action === 'accept') {
                        loadBooks(true); // admin view ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
                    }
                }
            } catch (error) {
                alert(`‡§∞‡§ø‡§ü‡§∞‡•ç‡§® ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§π‡•à‡§Ç‡§°‡§≤ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§`);
            }
        }
    });
}
// ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® 3: ‡§®‡§à ‡§ï‡§ø‡§§‡§æ‡§¨ ‡§ú‡•ã‡§°‡§º‡•á‡§Ç (‡§ï‡•á‡§µ‡§≤ Admin ‡§ï‡•á ‡§≤‡§ø‡§è)
if (addBookForm) {
    addBookForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const title = document.getElementById('newTitle').value;
        const author = document.getElementById('newAuthor').value;
        const category = document.getElementById('newCategory').value;

        try {
            const response = await fetch('/api/books', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ title, author, category })
            });
            
            const data = await response.json();
            alert(data.message); 
            
            if (data.success) {
                addBookForm.reset();
                loadBooks(true); // ‡§≤‡§ø‡§∏‡•ç‡§ü ‡§∞‡•Ä‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç
            }
        } catch (error) {
            alert('‡§ï‡§ø‡§§‡§æ‡§¨ ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§Æ‡•á‡§Ç ‡§®‡•á‡§ü‡§µ‡§∞‡•ç‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø‡•§');
        }
    });
}
// public/books.js ‡§ï‡•á ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç

// ... (existing loadBooks, setupDeleteListeners calls)

// üí° Admin ‡§∞‡§ø‡§ï‡•ç‡§µ‡•á‡§∏‡•ç‡§ü ‡§≤‡•â‡§ú‡§ø‡§ï ‡§Ø‡§π‡§æ‡§Å ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡•á‡§Ç
if (returnRequestsList) { 
    // ‡§Ø‡§π ‡§∏‡•Å‡§®‡§ø‡§∂‡•ç‡§ö‡§ø‡§§ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø ‡§´‡§º‡§Ç‡§ï‡•ç‡§∂‡§® ‡§ï‡•á‡§µ‡§≤ Admin ‡§™‡•á‡§ú ‡§™‡§∞ ‡§π‡•Ä ‡§ö‡§≤‡•á‡§Ç
    loadReturnRequests();
    setupReturnRequestListeners();
}
// public/books.js ‡§ï‡•á ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç

// ... (existing loadBooks, loadReturnRequests, setupReturnRequestListeners calls)

// üí° Admin ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§≤‡•â‡§ú‡§ø‡§ï ‡§Ø‡§π‡§æ‡§Å ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡•á‡§Ç
if (usersList) { 
    loadUsers();
    setupUserStatusListeners();
}
window.loadBooks = loadBooks; 

// 3. ‡§∏‡§≠‡•Ä ‡§≤‡§ø‡§∏‡§®‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§ï‡•á‡§µ‡§≤ ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡•á ‡§Ö‡§Ç‡§§ ‡§Æ‡•á‡§Ç ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡•á‡§Ç
// --------------------------------------------------------
setupDeleteListeners();
setupIssueListeners();