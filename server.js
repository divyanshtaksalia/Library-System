// 1. рдЬрд╝рд░реВрд░реА рдкреИрдХреЗрдЬ рдЗрдореНрдкреЛрд░реНрдЯ рдХрд░реЗрдВ
const express = require('express');
const { Pool } = require('pg'); // MySQL2 рдХреА рдЬрдЧрд╣ PostgreSQL Pool рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
const cors = require('cors');
const path = require('path');
const bcrypt = require('bcryptjs');

// 2. рдПрдХреНрд╕рдкреНрд░реЗрд╕ рдРрдк (Express App) рдмрдирд╛рдПрдБ
const app = express();

// 3. рдорд┐рдбрд▓рд╡реЗрдпрд░ (Middleware) рдХрд╛ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░реЗрдВ
app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

// 4. PostgreSQL рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рдХрдиреЗрдХреНрдЯ рдХрд░реЗрдВ (Render Environment Variables рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ)
const pool = new Pool({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME,
    port: 5432, // PostgreSQL рдХрд╛ рдбрд┐рдлрд╝реЙрд▓реНрдЯ рдкреЛрд░реНрдЯ
    ssl: { rejectUnauthorized: false } // Render/Cloud рд╣реЛрд╕реНрдЯрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рдЖрд╡рд╢реНрдпрдХ
});

pool.connect((err, client, done) => {
    if (err) {
        console.error('PostgreSQL рд╕реЗ рдХрдиреЗрдХреНрдЯ рд╣реЛрдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛: ', err.stack);
        return;
    }
    console.log('PostgreSQL рд╕реЗ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдХрдиреЗрдХреНрдЯ рд╣реЛ рдЧрдпрд╛');
    done(); // рдХреНрд▓рд╛рдЗрдВрдЯ рдХреЛ рдкреВрд▓ рдореЗрдВ рд╡рд╛рдкрд╕ рднреЗрдЬреЗрдВ
});

// 5. рдПрдХ 'рдЯреЗрд╕реНрдЯ' API рд░реВрдЯ рдмрдирд╛рдПрдБ
app.get('/api/test-connection', (req, res) => {
    // PostgreSQL рд╕реЗ рдПрдХ рд╕рд┐рдВрдкрд▓ рдХреНрд╡реЗрд░реА (query) рдЪрд▓рд╛рддреЗ рд╣реИрдВ
    pool.query('SELECT 1 + 1 AS solution', (err, results) => {
        if (err) {
            console.error('рдХреНрд╡реЗрд░реА рдПрд░рд░: ' + err.stack);
            return res.status(500).send('рдбреЗрдЯрд╛рдмреЗрд╕ рдХреНрд╡реЗрд░реА рдлреЗрд▓ рд╣реЛ рдЧрдИ');
        }
        res.json(results.rows); // PostgreSQL рдореЗрдВ рдкрд░рд┐рдгрд╛рдо results.rows рдореЗрдВ рд╣реЛрддреЗ рд╣реИрдВ
    });
});

// ----------------------------------------------------
// API Routes (рд░рд╛рд╕реНрддреЗ)
// ----------------------------------------------------
// ЁЯФе рдЕрд╕реНрдерд╛рдпреА рд░реВрдЯ: рдирдпрд╛ рдПрдбрдорд┐рди рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП (рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рдЗрд╕реЗ рддреБрд░рдВрдд рд╣рдЯрд╛ рджреЗрдВ)
app.get('/api/create-admin-one-time', async (req, res) => {
    const adminEmail = 'new.admin@mylibrary.com'; // <--- рдирдпрд╛ рдИрдореЗрд▓
    const adminPassword = 'AdminPass2025'; // <--- рдирдпрд╛ рдкрд╛рд╕рд╡рд░реНрдб
    const adminUsername = 'SystemAdmin';

    try {
        const hashedPassword = await bcrypt.hash(adminPassword, 10);
        
        // рдЪреЗрдХ рдХрд░реЗрдВ рдХрд┐ рдпреВрдЬрд╝рд░ рдкрд╣рд▓реЗ рд╕реЗ рдореМрдЬреВрдж рддреЛ рдирд╣реАрдВ рд╣реИ
        const checkSql = 'SELECT user_id FROM users WHERE email = $1';
        const existingUser = await pool.query(checkSql, [adminEmail]);

        if (existingUser.rowCount > 0) {
            return res.json({ success: false, message: 'рдПрдбрдорд┐рди рдкрд╣рд▓реЗ рд╕реЗ рдореМрдЬреВрдж рд╣реИред' });
        }
        
        // рдирдпрд╛ рдПрдбрдорд┐рди рд░рд┐рдХреЙрд░реНрдб рдЬреЛрдбрд╝реЗрдВ (role='admin' рд╕реЗрдЯ рдХрд░реЗрдВ)
        const insertSql = 'INSERT INTO users (username, email, password_hash, role) VALUES ($1, $2, $3, $4)';
        await pool.query(insertSql, [adminUsername, adminEmail, hashedPassword, 'admin']);
        
        res.json({ 
            success: true, 
            message: `рдирдпрд╛ рдПрдбрдорд┐рди рдмрдирд╛рдпрд╛ рдЧрдпрд╛ред рдИрдореЗрд▓: ${adminEmail}, рдкрд╛рд╕рд╡рд░реНрдб: ${adminPassword}. **рд╕реБрд░рдХреНрд╖рд╛ рдХреЗ рд▓рд┐рдП рдЗрд╕ рд░реВрдЯ рдХреЛ рдЬрд▓реНрдж рд╣реА рд╣рдЯрд╛ рджреЗрдВ!**` 
        });

    } catch (error) {
        console.error("Admin creation error:", error);
        res.status(500).json({ success: false, message: 'рдПрдбрдорд┐рди рдмрдирд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
    }
});
// рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рд░реВрдЯ
app.post('/api/register', async (req, res) => {
    const { username, email, password } = req.body;

    if (!username || !email || !password) {
        return res.status(400).json({ success: false, message: 'рдХреГрдкрдпрд╛ рд╕рднреА рдлрд╝реАрд▓реНрдб рднрд░реЗрдВред' });
    }

    try {
        const hashedPassword = await bcrypt.hash(password, 10);
        
        // PostgreSQL рдкреНрд▓реЗрд╕рд╣реЛрд▓реНрдбрд░реНрд╕: ? рдХреА рдЬрдЧрд╣ $1, $2, $3...
        const sql = 'INSERT INTO users (username, email, password_hash) VALUES ($1, $2, $3)';
        
        pool.query(sql, [username, email, hashedPassword], (err, result) => {
            if (err) {
                // рдбреБрдкреНрд▓реАрдХреЗрдЯ рдПрдВрдЯреНрд░реА рдХреЛ PostgreSQL рдореЗрдВ рдЕрд▓рдЧ рддрд░реАрдХреЗ рд╕реЗ рд╣реИрдВрдбрд▓ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ
                if (err.code === '23505') { // 23505 is the unique violation code
                    return res.status(409).json({ success: false, message: 'рдпрд╣ рдИрдореЗрд▓ рдкрд╣рд▓реЗ рд╕реЗ рдкрдВрдЬреАрдХреГрдд рд╣реИред' });
                }
                console.error(err);
                return res.status(500).json({ success: false, message: 'рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдлреЗрд▓ рд╣реЛ рдЧрдпрд╛ред рд╕рд░реНрд╡рд░ рддреНрд░реБрдЯрд┐ред' });
            }
            
            res.status(201).json({ success: true, message: 'рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рд╕рдлрд▓! рдХреГрдкрдпрд╛ рд▓реЙрдЧрд┐рди рдХрд░реЗрдВред' });
        });
    } catch (hashError) {
        console.error("Hashing error:", hashError);
        res.status(500).json({ success: false, message: 'рдкрд╛рд╕рд╡рд░реНрдб рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
    }
});


// Login Route
app.post('/api/login', (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ success: false, message: 'рдХреГрдкрдпрд╛ рдИрдореЗрд▓ рдФрд░ рдкрд╛рд╕рд╡рд░реНрдб рднрд░реЗрдВред' });
    }

    // 1. рдбреЗрдЯрд╛рдмреЗрд╕ рд╕реЗ рдпреВрдЬрд╝рд░ рдХреЛ рдИрдореЗрд▓ рджреНрд╡рд╛рд░рд╛ рдвреВрдБрдвреЗрдВ
    // PostgreSQL рдореЗрдВ рдХреЙрд▓рдо рдирд╛рдо 'password' рдирд╣реАрдВ, 'password_hash' рд╣реИ
    const sql = 'SELECT user_id, password_hash, role, account_status, username FROM users WHERE email = $1';
    
    pool.query(sql, [email], async (err, results) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ success: false, message: 'рд╕рд░реНрд╡рд░ рддреНрд░реБрдЯрд┐ред' });
        }

        // 2. рдЕрдЧрд░ рдпреВрдЬрд╝рд░ рдирд╣реАрдВ рдорд┐рд▓рд╛
        if (results.rows.length === 0) { // PostgreSQL рдореЗрдВ рдкрд░рд┐рдгрд╛рдо results.rows рдореЗрдВ рд╣реЛрддреЗ рд╣реИрдВ
            return res.status(401).json({ success: false, message: 'рдЕрдорд╛рдиреНрдп рдИрдореЗрд▓ рдпрд╛ рдкрд╛рд╕рд╡рд░реНрдбред' });
        }

        const user = results.rows[0];

        // 3. рдЕрдХрд╛рдЙрдВрдЯ рдмреНрд▓реЙрдХ рд╣реИ рдпрд╛ рдирд╣реАрдВ рдЬрд╛рдБрдЪреЗрдВ
        if (user.account_status === 'blocked') {
            return res.status(403).json({ success: false, message: 'рдЖрдкрдХрд╛ рдЦрд╛рддрд╛ рдмреНрд▓реЙрдХ рд╣реИред рдХреГрдкрдпрд╛ рд▓рд╛рдЗрдмреНрд░реЗрд░реА рдСрдлрд┐рд╕ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред' });
        }

        // 4. рдкрд╛рд╕рд╡рд░реНрдб рдХреА рддреБрд▓рдирд╛ рдХрд░реЗрдВ (Hashing рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ)
        // PostgreSQL рд╕реЗ рдорд┐рд▓рд╛ рдХреЙрд▓рдо рдирд╛рдо 'password_hash' рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
        const isMatch = await bcrypt.compare(password, user.password_hash);

        if (!isMatch) {
            return res.status(401).json({ success: false, message: 'рдЕрдорд╛рдиреНрдп рдИрдореЗрд▓ рдпрд╛ рдкрд╛рд╕рд╡рд░реНрдбред' });
        }

        // 5. рд╕рдлрд▓рддрд╛
        res.status(200).json({
            success: true,
            message: 'рд▓реЙрдЧрд┐рди рд╕рдлрд▓!',
            user: {
                id: user.user_id,
                username: user.username,
                role: user.role // student рдпрд╛ admin
            }
        });
    });
});
// ----------------------------------------------------
// Books API Routes
// ----------------------------------------------------

// 1. рд╕рднреА рдХрд┐рддрд╛рдмреЗрдВ рджрд┐рдЦрд╛рдПрдБ (GET /api/books)
app.get('/api/books', (req, res) => {
    const sql = 'SELECT book_id, title, author, category, status FROM books ORDER BY title ASC';
    
    pool.query(sql, (err, results) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ success: false, message: 'рдХрд┐рддрд╛рдмреЗрдВ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
        }
        res.json({ success: true, books: results.rows });
    });
});

// 2. рдирдИ рдХрд┐рддрд╛рдм рдЬреЛрдбрд╝реЗрдВ (POST /api/books) - рдХреЗрд╡рд▓ Admin рдХреЗ рд▓рд┐рдП
app.post('/api/books', (req, res) => {
    const { title, author, category } = req.body;

    if (!title || !author || !category) {
        return res.status(400).json({ success: false, message: 'рд╢реАрд░реНрд╖рдХ, рд▓реЗрдЦрдХ рдФрд░ рд╢реНрд░реЗрдгреА рдЖрд╡рд╢реНрдпрдХ рд╣реИрдВред' });
    }

    const sql = 'INSERT INTO books (title, author, category) VALUES ($1, $2, $3) RETURNING book_id';
    
    pool.query(sql, [title, author, category], (err, result) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ success: false, message: 'рдХрд┐рддрд╛рдм рдЬреЛрдбрд╝рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
        }
        res.status(201).json({ 
            success: true, 
            message: 'рдХрд┐рддрд╛рдм рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЬреЛрдбрд╝реА рдЧрдИ!',
            bookId: result.rows[0].book_id // PostgreSQL рд╕реЗ ID рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХрд╛ рддрд░реАрдХрд╛
        });
    });
});
// 3. рдХрд┐рддрд╛рдм рд╣рдЯрд╛рдПрдБ (DELETE /api/books/:id) - рдХреЗрд╡рд▓ Admin рдХреЗ рд▓рд┐рдП
app.delete('/api/books/:id', (req, res) => {
    const bookId = req.params.id;

    const sql = 'DELETE FROM books WHERE book_id = $1';
    
    pool.query(sql, [bookId], (err, result) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ success: false, message: 'рдХрд┐рддрд╛рдм рд╣рдЯрд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
        }
        
        if (result.rowCount === 0) { // PostgreSQL рдореЗрдВ affectedRows рдХреА рдЬрдЧрд╣ rowCount
            return res.status(404).json({ success: false, message: 'рдХрд┐рддрд╛рдм рдирд╣реАрдВ рдорд┐рд▓реАред' });
        }
        
        res.status(200).json({ success: true, message: 'рдХрд┐рддрд╛рдм рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╣рдЯрд╛рдИ рдЧрдИред' });
    });
});
// ----------------------------------------------------
// Users API Routes (рдХреЗрд╡рд▓ Admin рдХреЗ рд▓рд┐рдП)
// ----------------------------------------------------

// 1. рд╕рднреА рдпреВрдЬрд╝рд░реНрд╕ рджрд┐рдЦрд╛рдПрдБ (GET /api/users)
app.get('/api/users', (req, res) => {
    // MySQL рдХреЗ " рдХреА рдЬрдЧрд╣ PostgreSQL рдореЗрдВ ' рдХрд╛ рдЙрдкрдпреЛрдЧ
    const sql = "SELECT user_id, username, email, role, account_status FROM users WHERE role != 'admin' ORDER BY user_id DESC";
    
    pool.query(sql, (err, results) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ success: false, message: 'рдпреВрдЬрд╝рд░реНрд╕ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
        }
        res.json({ success: true, users: results.rows });
    });
});

// 2. рдпреВрдЬрд╝рд░ рдЕрдХрд╛рдЙрдВрдЯ рд╕реНрдЯреЗрдЯрд╕ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ (POST /api/users/status)
app.post('/api/users/status', (req, res) => {
    const { userId, status } = req.body;

    if (!userId || !status) {
        return res.status(400).json({ success: false, message: 'рдпреВрдЬрд╝рд░ ID рдФрд░ рд╕реНрдЯреЗрдЯрд╕ рдЖрд╡рд╢реНрдпрдХ рд╣реИред' });
    }

    const sql = "UPDATE users SET account_status = $1 WHERE user_id = $2 AND role != 'admin'";
    
    pool.query(sql, [status, userId], (err, result) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ success: false, message: 'рд╕реНрдЯреЗрдЯрд╕ рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
        }
        
        if (result.rowCount === 0) {
            return res.status(404).json({ success: false, message: 'рдпреВрдЬрд╝рд░ рдирд╣реАрдВ рдорд┐рд▓рд╛ рдпрд╛ рдПрдбрдорд┐рди рдХреЛ рдЕрдкрдбреЗрдЯ рдХрд░рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВред' });
        }
        
        res.status(200).json({ success: true, message: `рдпреВрдЬрд╝рд░ рдХрд╛ рдЕрдХрд╛рдЙрдВрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ ${status} рдХрд┐рдпрд╛ рдЧрдпрд╛ред` });
    });
});
// ----------------------------------------------------
// Issue & Return API Routes
// ----------------------------------------------------

// 1. рдХрд┐рддрд╛рдм рдЗрд╢реНрдпреВ рдХрд░реЗрдВ (POST /api/issue-book)
app.post('/api/issue-book', (req, res) => {
    const { userId, bookId } = req.body;

    if (!userId || !bookId) {
        return res.status(400).json({ success: false, message: 'рдпреВрдЬрд╝рд░ ID рдФрд░ рдмреБрдХ ID рдЖрд╡рд╢реНрдпрдХ рд╣реИред' });
    }
    
    // PostgreSQL рдореЗрдВ рдЯреНрд░рд╛рдВрдЬреЗрдХреНрд╢рди рдХреЗ рд▓рд┐рдП рдХреНрд▓рд╛рдЗрдВрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ
    pool.connect(async (err, client, done) => {
        if (err) return res.status(500).json({ success: false, message: 'рдЗрд╢реНрдпреВ рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });

        try {
            await client.query('BEGIN'); // рдЯреНрд░рд╛рдВрдЬреЗрдХреНрд╢рди рд╢реБрд░реВ

            // A. рдХрд┐рддрд╛рдм рдХрд╛ рд╕реНрдЯреЗрдЯрд╕ 'available' рд╣реИ, рдпрд╣ рдЬрд╛рдБрдЪреЗрдВ рдФрд░ рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ (MySQL рд╕реЗ рдмреЗрд╣рддрд░)
            const checkAndUpdateSql = "UPDATE books SET status = 'issued' WHERE book_id = $1 AND status = 'available' RETURNING book_id";
            const updateResult = await client.query(checkAndUpdateSql, [bookId]);

            if (updateResult.rowCount === 0) {
                await client.query('ROLLBACK');
                return res.status(400).json({ success: false, message: 'рдХрд┐рддрд╛рдм рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИ рдпрд╛ рдкрд╣рд▓реЗ рд╕реЗ рдЗрд╢реНрдпреВ рд╣реИред' });
            }

            // B. рдЗрд╢реНрдпреВ рд░рд┐рдХреЙрд░реНрдб рдЬреЛрдбрд╝реЗрдВ
            // рдЯреЗрдмрд▓ рдХрд╛ рдирд╛рдо 'issued_books' рдХреА рдЬрдЧрд╣ 'issues' рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
            const issueSql = 'INSERT INTO issues (user_id, book_id) VALUES ($1, $2)';
            await client.query(issueSql, [userId, bookId]);

            // C. рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ
            await client.query('COMMIT');
            res.status(200).json({ success: true, message: 'рдХрд┐рддрд╛рдм рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЗрд╢реНрдпреВ рд╣реБрдИ!' });

        } catch (e) {
            await client.query('ROLLBACK');
            console.error("Issue Transaction Error:", e);
            res.status(500).json({ success: false, message: 'рдЗрд╢реНрдпреВ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
        } finally {
            done(); // рдХреНрд▓рд╛рдЗрдВрдЯ рдХреЛ рдкреВрд▓ рдореЗрдВ рд╡рд╛рдкрд╕ рднреЗрдЬреЗрдВ
        }
    });
});


// 2. рд╕реНрдЯреВрдбреЗрдВрдЯ рдХреЗ рдЗрд╢реНрдпреВ рдХрд┐рдП рдЧрдП рдСрд░реНрдбрд░реНрд╕ рджрд┐рдЦрд╛рдПрдБ (GET /api/my-orders/:userId)
app.get('/api/my-orders/:userId', (req, res) => {
    const userId = req.params.userId;
    
    // рдЯреЗрдмрд▓ рдХрд╛ рдирд╛рдо issued_books рдХреА рдЬрдЧрд╣ issues рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
    const sql = `
        SELECT ib.issue_id, ib.issue_date, b.title, b.author, ib.status AS return_status
        FROM issues ib 
        JOIN books b ON ib.book_id = b.book_id 
        WHERE ib.user_id = $1 AND ib.return_date IS NULL
        ORDER BY ib.issue_date DESC`;

    pool.query(sql, [userId], (err, results) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ success: false, message: 'рдСрд░реНрдбрд░реНрд╕ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
        }
        res.json({ success: true, orders: results.rows });
    });
});

// 3. рдХрд┐рддрд╛рдм рд░рд┐рдЯрд░реНрди рдХрд░реЗрдВ (POST /api/return-book) - рдпрд╣ рдЕрдм Admin рджреНрд╡рд╛рд░рд╛ рд╕реАрдзреЗ рдЙрдкрдпреЛрдЧ рдирд╣реАрдВ рд╣реЛрдЧрд╛
// рдпрд╣ рдХреЛрдб рдЖрдкрдХреЗ рдкрд┐рдЫрд▓реЗ code рдореЗрдВ рдереЛрдбрд╝рд╛ рднреНрд░рдорд┐рдд рдерд╛, рдЕрдм рд╣рдо рдХреЗрд╡рд▓ request/handle-return рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВрдЧреЗред
/* app.post('/api/return-book', (req, res) => { ... }) рд╣рдЯрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛ */


// 3. рдХрд┐рддрд╛рдм рд░рд┐рдЯрд░реНрди рдХреЗ рд▓рд┐рдП рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рднреЗрдЬреЗрдВ (POST /api/request-return)
app.post('/api/request-return', (req, res) => {
    const { issueId } = req.body;
    
    if (!issueId) {
        return res.status(400).json({ success: false, message: 'рдЗрд╢реНрдпреВ ID рдЖрд╡рд╢реНрдпрдХ рд╣реИред' });
    }
    
    // рдЯреЗрдмрд▓ рдХрд╛ рдирд╛рдо issued_books рдХреА рдЬрдЧрд╣ issues рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
    const sql = `
        UPDATE issues 
        SET status = 'pending' 
        WHERE 
            issue_id = $1 AND 
            return_date IS NULL AND 
            (status = 'issued' OR status = 'rejected')`;

    pool.query(sql, [issueId], (err, result) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ success: false, message: 'рд░рд┐рдЯрд░реНрди рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рднреЗрдЬрдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
        }
        if (result.rowCount === 0) {
            return res.status(404).json({ success: false, message: 'рдЗрд╢реНрдпреВ рд░рд┐рдХреЙрд░реНрдб рдирд╣реАрдВ рдорд┐рд▓рд╛ рдпрд╛ рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдкрд╣рд▓реЗ рд╣реА рднреЗрдЬреА рдЬрд╛ рдЪреБрдХреА рд╣реИред' });
        }
        res.status(200).json({ success: true, message: 'рд░рд┐рдЯрд░реНрди рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рднреЗрдЬреА рдЧрдИред рдПрдбрдорд┐рди рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд╛ рдЗрдВрддрдЬрд╝рд╛рд░ рд╣реИред' });
    });
});
// 4. рд▓рдВрдмрд┐рдд рд░рд┐рдЯрд░реНрди рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рджрд┐рдЦрд╛рдПрдБ (GET /api/return-requests)
app.get('/api/return-requests', (req, res) => {
    // рдЯреЗрдмрд▓ рдХрд╛ рдирд╛рдо issued_books рдХреА рдЬрдЧрд╣ issues рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
    const sql = `
        SELECT 
            ib.issue_id, 
            ib.book_id,
            u.username, 
            b.title, 
            b.author,
            ib.issue_date
        FROM issues ib
        JOIN users u ON ib.user_id = u.user_id
        JOIN books b ON ib.book_id = b.book_id
        WHERE ib.status = 'pending'
        ORDER BY ib.issue_date DESC`;

    pool.query(sql, (err, results) => {
        if (err) {
            console.error(err);
            return res.status(500).json({ success: false, message: 'рд░рд┐рдЯрд░реНрди рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
        }
        res.json({ success: true, requests: results.rows });
    });
});
// 5. рдПрдбрдорд┐рди рджреНрд╡рд╛рд░рд╛ рд░рд┐рдЯрд░реНрди рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдХреЛ рд╕реНрд╡реАрдХрд╛рд░/рдЕрд╕реНрд╡реАрдХрд╛рд░ рдХрд░реЗрдВ (POST /api/handle-return)
app.post('/api/handle-return', (req, res) => {
    const { issueId, bookId, action } = req.body; 

    if (!issueId || !bookId || !action || (action !== 'accept' && action !== 'reject')) {
        return res.status(400).json({ success: false, message: 'рдЕрдорд╛рдиреНрдп рдЕрдиреБрд░реЛрдз рдбреЗрдЯрд╛ред' });
    }

    pool.connect(async (err, client, done) => {
        if (err) return res.status(500).json({ success: false, message: 'рдкреНрд░реЛрд╕реЗрд╕ рд╢реБрд░реВ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });

        try {
            await client.query('BEGIN'); // рдЯреНрд░рд╛рдВрдЬреЗрдХреНрд╢рди рд╢реБрд░реВ

            if (action === 'reject') {
                // A. рдХреЗрд╡рд▓ рд╕реНрдЯреЗрдЯрд╕ 'rejected' рдкрд░ рд╕реЗрдЯ рдХрд░реЗрдВ 
                const rejectSql = "UPDATE issues SET status = 'rejected' WHERE issue_id = $1 AND status = 'pending'";
                const result = await client.query(rejectSql, [issueId]);
                
                if(result.rowCount === 0) throw new Error("рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдирд╣реАрдВ рдорд┐рд▓реА");

                await client.query('COMMIT');
                res.status(200).json({ success: true, message: 'рд░рд┐рдЯрд░реНрди рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдЕрд╕реНрд╡реАрдХрд╛рд░ рдХрд░ рджреА рдЧрдИред' });
                
            } else if (action === 'accept') {
                
                // B. рд╕реНрд╡реАрдХрд╛рд░ рдХрд░реЗрдВ: 1. issues рдЕрдкрдбреЗрдЯ рдХрд░реЗрдВ (return_date рдФрд░ status)
                const updateIssueSql = "UPDATE issues SET return_date = NOW(), status = 'completed' WHERE issue_id = $1 AND status = 'pending'";
                const result = await client.query(updateIssueSql, [issueId]);

                if (result.rowCount === 0) throw new Error("рд▓рдВрдмрд┐рдд рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рдирд╣реАрдВ рдорд┐рд▓реА");

                // C. рд╕реНрд╡реАрдХрд╛рд░ рдХрд░реЗрдВ: 2. books рдЯреЗрдмрд▓ рдореЗрдВ рд╕реНрдЯреЗрдЯрд╕ 'available' рдкрд░ рд╕реЗрдЯ рдХрд░реЗрдВ
                const updateBookSql = "UPDATE books SET status = 'available' WHERE book_id = $1";
                await client.query(updateBookSql, [bookId]);
                    
                // D. рдХрдорд┐рдЯ рдХрд░реЗрдВ (Commit)
                await client.query('COMMIT');
                res.status(200).json({ success: true, message: 'рд░рд┐рдЯрд░реНрди рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕реНрд╡реАрдХрд╛рд░ рдХрд┐рдпрд╛ рдЧрдпрд╛ред рдХрд┐рддрд╛рдм рдЙрдкрд▓рдмреНрдз рд╣реЛ рдЧрдИ рд╣реИ!' });
            }
        } catch (e) {
            await client.query('ROLLBACK');
            console.error("Admin Handle Transaction Error:", e);
            res.status(500).json({ success: false, message: e.message || 'рд░рд┐рдЯрд░реНрди рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐ред' });
        } finally {
            done(); // рдХреНрд▓рд╛рдЗрдВрдЯ рдХреЛ рдкреВрд▓ рдореЗрдВ рд╡рд╛рдкрд╕ рднреЗрдЬреЗрдВ
        }
    });
});
// 6. рд╕рд░реНрд╡рд░ рдХреЛ 'рд╕реБрдирдиреЗ' (Listen) рдХреЗ рд▓рд┐рдП рдЪрд╛рд▓реВ рдХрд░реЗрдВ
const PORT = process.env.PORT || 3000; // Render рдХрд╛ рдкреЛрд░реНрдЯ рдпрд╛ 3000 рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ
app.listen(PORT, () => {
    console.log(`рд╕рд░реНрд╡рд░ рдкреЛрд░реНрдЯ ${PORT} рдкрд░ рдЪрд▓ рд░рд╣рд╛ рд╣реИ`);
});